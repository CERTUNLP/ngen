# Base stage for dependency installation
FROM python:3.11-alpine3.20 AS base

ARG APP_VERSION_TAG
ARG APP_COMMIT
ARG APP_BRANCH

ENV APP_VERSION_TAG=$APP_VERSION_TAG
ENV APP_COMMIT=$APP_COMMIT
ENV APP_BRANCH=$APP_BRANCH
ENV APP_BUILD_FILE="prod"

# Configure environment variables for pip
ENV PIP_NO_CACHE_DIR=true \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Temporarily install necessary build dependencies
RUN apk add --no-cache --virtual .build-deps \
    build-base \
    gettext \
    libmagic \
    gcc \
    musl-dev \
    python3-dev

# Copy the requirements file
COPY requirements.txt /code/requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir --prefix=/install -r /code/requirements.txt

# Final image
FROM python:3.11-alpine3.20

# Configure environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install only the necessary libraries in the final image
RUN apk add --no-cache libmagic gettext

# Copy installed dependencies from the base stage
COPY --from=base /install /usr/local

# Copy the application code
COPY . /code/

# Add version information
ARG APP_VERSION_TAG
ARG APP_COMMIT
ARG APP_BRANCH
ARG APP_BUILD_FILE="prod"
RUN echo "{\"tag\": \"$APP_VERSION_TAG\", \"commit\": \"$APP_COMMIT\", \"branch\": \"$APP_BRANCH\", \"build_file\": \"$APP_BUILD_FILE\"}" > /code/version.json

# Expose port 8000 but we will use a reverse proxy to serve the app anyway
EXPOSE 8000

# Set the working directory
WORKDIR /code
